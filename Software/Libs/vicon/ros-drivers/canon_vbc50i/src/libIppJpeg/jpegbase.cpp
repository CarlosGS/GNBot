/*
//
//               INTEL CORPORATION PROPRIETARY INFORMATION
//  This software is supplied under the terms of a license agreement or
//  nondisclosure agreement with Intel Corporation and may not be copied
//  or disclosed except in accordance with the terms of that agreement.
//    Copyright (c) 2001-2004 Intel Corporation. All Rights Reserved.
//
//  Intel® Integrated Performance Primitives JPEG Viewer Sample for Windows*
//
//  By downloading and installing this sample, you hereby agree that the
//  accompanying Materials are being provided to you under the terms and
//  conditions of the End User License Agreement for the Intel® Integrated
//  Performance Primitives product previously accepted by you. Please refer
//  to the file ipplic.htm located in the root directory of your Intel® IPP product
//  installation for more information.
//
//  JPEG is an international standard promoted by ISO/IEC and other organizations.
//  Implementations of these standards, or the standard enabled platforms may
//  require licenses from various entities, including Intel Corporation.
//
//
*/

#include "precomp.h"

#ifndef __JPEGBASE_H__
#include "jpegbase.h"
#endif


// raw quant tables must be in zigzag order
const Ipp8u DefaultLuminanceQuant[64] =
{
  16,  11,  12,  14,  12,  10,  16,  14,
  13,  14,  18,  17,  16,  19,  24,  40,
  26,  24,  22,  22,  24,  49,  35,  37,
  29,  40,  58,  51,  61,  60,  57,  51,
  56,  55,  64,  72,  92,  78,  64,  68,
  87,  69,  55,  56,  80, 109,  81,  87,
  95,  98, 103, 104, 103,  62,  77, 113,
 121, 112, 100, 120,  92, 101, 103,  99
};


// raw quant tables must be in zigzag order
const Ipp8u DefaultChrominanceQuant[64] =
{
  17,  18,  18,  24,  21,  24,  47,  26,
  26,  47,  99,  66,  56,  66,  99,  99,
  99,  99,  99,  99,  99,  99,  99,  99,
  99,  99,  99,  99,  99,  99,  99,  99,
  99,  99,  99,  99,  99,  99,  99,  99,
  99,  99,  99,  99,  99,  99,  99,  99,
  99,  99,  99,  99,  99,  99,  99,  99,
  99,  99,  99,  99,  99,  99,  99,  99
};


const Ipp8u DefaultLuminanceDCBits[] =
{
  0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const Ipp8u DefaultLuminanceDCValues[] =
{
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  0x08, 0x09, 0x0a, 0x0b
};


const Ipp8u DefaultChrominanceDCBits[] =
{
  0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
};


const Ipp8u DefaultChrominanceDCValues[] =
{
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  0x08, 0x09, 0x0a, 0x0b
};


const Ipp8u DefaultLuminanceACBits[] =
{
  0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03,
  0x05, 0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7d
};


const Ipp8u DefaultLuminanceACValues[] =
{
  0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
  0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
  0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
  0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
  0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
  0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
  0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
  0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
  0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
  0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
  0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
  0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
  0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
  0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
  0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
  0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
  0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
  0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
  0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
  0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
  0xf9, 0xfa
};


const Ipp8u DefaultChrominanceACBits[] =
{
  0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04,
  0x07, 0x05, 0x04, 0x04, 0x00, 0x01, 0x02, 0x77
};


const Ipp8u DefaultChrominanceACValues[] =
{
  0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
  0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
  0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
  0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
  0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
  0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
  0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
  0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
  0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
  0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
  0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
  0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
  0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
  0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
  0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
  0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
  0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
  0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
  0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
  0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
  0xf9, 0xfa
};


const char* GetErrorStr(JERRCODE code)
{
  char* str;

  switch(code)
  {
    case JPEG_OK:                 str = "no error"; break;
    case JPEG_NOT_IMPLEMENTED:    str = "not supported"; break;
    case JPEG_INTERNAL_ERROR:     str = "internal error"; break;
    case JPEG_BUFF_TOO_SMALL:     str = "buffer too small"; break;
    case JPEG_OUT_OF_MEMORY:      str = "out of memory"; break;
    case JPEG_BAD_SEGMENT_LENGTH: str = "bad segment length"; break;
    case JPEG_BAD_HUFF_TBL:       str = "bad huffman table"; break;
    case JPEG_BAD_QUANT_SEGMENT:  str = "bad quant segment"; break;
    case JPEG_BAD_SCAN_SEGMENT:   str = "bad scan segment"; break;
    case JPEG_BAD_FRAME_SEGMENT:  str = "bad frame segment"; break;
    case JPEG_BAD_COMPONENT_ID:   str = "bad component id"; break;
    case JPEG_BAD_SAMPLING:       str = "bad sampling factors"; break;
    case JPEG_BAD_RESTART:        str = "wrong restart marker"; break;
    default:                      str = "unknown code"; break;
  }

  return str;
} // GetErrorStr()


JERRCODE BITSTREAM::_WRITE_BYTE(int byte)
{
  if(currPos == DataLen)
    return JPEG_BUFF_TOO_SMALL;

  pData[currPos] = (Ipp8u)byte;
  currPos++;

  return JPEG_OK;
} // BITSTREAM::_WRITE_BYTE()


JERRCODE BITSTREAM::_WRITE_WORD(int word)
{
  JERRCODE jerr;

  jerr = _WRITE_BYTE(word >> 8);
  if(JPEG_OK != jerr)
    return jerr;

  jerr = _WRITE_BYTE(word);
  if(JPEG_OK != jerr)
    return jerr;

  return JPEG_OK;
} // BITSTREAM::_WRITE_WORD()


JERRCODE BITSTREAM::_READ_BYTE(int* byte)
{
  if(currPos == DataLen)
    return JPEG_BUFF_TOO_SMALL;

  *byte = pData[currPos];
  currPos++;

  return JPEG_OK;
} // BITSTREAM::_READ_BYTE()


JERRCODE BITSTREAM::_READ_WORD(int* word)
{
  int      hb;
  int      lb;
  JERRCODE jerr;

  jerr = _READ_BYTE(&hb);
  if(JPEG_OK != jerr)
    return jerr;

  jerr = _READ_BYTE(&lb);
  if(JPEG_OK != jerr)
    return jerr;

  *word = (hb << 8) + lb;

  return JPEG_OK;
} // BITSTREAM::_READ_WORD() 

